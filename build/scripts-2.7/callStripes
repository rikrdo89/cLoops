#!/home/caoy7/anaconda2/envs/ngs2/bin/python
#--coding:utf-8 --
"""
stripe.py
2018-05-04: finished
2018-11-16: fix small bugs when no stripes were found
"""

__author__ = "CAO Yaqiang"
__date__ = ""
__modified__ = ""
__email__ = "caoyaqiang0410@gmail.com"

#python library
import gc, os, time, sys, shutil, gzip, copy, argparse
from glob import glob
from datetime import datetime

#3rd library
import numpy as np
import pandas as pd
from joblib import Parallel, delayed
from scipy.stats import hypergeom, binom, poisson, combine_pvalues

#cLoops
from cLoops.settings import *
from cLoops.utils import getLogger, callSys, cFlush, mainHelp
from cLoops.io import parseRawBedpe, parseRawBedpe2, txt2jd, parseJd, parseIv, loops2washU, loops2juice
from cLoops.cDBSCAN import cDBSCAN as DBSCAN
from cLoops.cModel import getGenomeCoverage, getPETsforRegions, getCounts, removeDup

#global settings
from cLoops.utils import EPILOG
global logger


def singleStripDBSCAN(f, eps, minPts, extx=1, exty=1):
    """
    Run DBSCAN to detect stripes for one chromosome.
    """
    key, mat = parseJd(f)
    mat[:, 1] = mat[:, 1] * extx
    mat[:, 2] = mat[:, 2] * exty
    dataI, dataS, dis, dss = [], [], [], []
    #data for interaction records, read for readId
    report = "Clustering %s and %s using eps as %s, minPts as %s" % (key[0],
                                                                     key[1],
                                                                     eps,
                                                                     minPts)
    print(report)
    db = DBSCAN(mat, eps, minPts)
    labels = pd.Series(db.labels)
    mat = pd.DataFrame(
        mat[:, 1:].astype("float"), index=mat[:, 0], columns=["X", "Y"])
    nlabels = set(labels.values)
    #collect clusters
    for label in nlabels:
        los = list(labels[labels == label].index)
        sub = mat.loc[los, :]
        r = [
            key[0],
            int(np.min(sub["X"]) / extx),
            int(np.max(sub["X"]) / extx),
            key[1],
            int(np.min(sub["Y"]) / exty),
            int(np.max(sub["Y"]) / exty),
            sub.shape[0],
        ]
        dataI.append(r)
    report = "Clustering %s and %s finished." % (key[0], key[1])
    print(report)
    return key, dataI


def filterCandidateStripes(rs, pets=200, lengthFoldDiff=20):
    for key in rs.keys():
        nds = []
        for r in rs[key]:
            if r[6] < pets:
                continue
            xlen = r[2] - r[1]
            ylen = r[5] - r[4]
            if (xlen / ylen > lengthFoldDiff) or (ylen / xlen >
                                                  lengthFoldDiff):
                nds.append(r)
        rs[key] = nds
    return rs


def getNearbyStripes(iva, ivb, win=5):
    """
    @param iva: [start,end] 
    """
    lena = iva[1] - iva[0]
    lenb = ivb[1] - ivb[0]
    ivas, ivbs = [], []
    ca = sum(iva) / 2
    cb = sum(ivb) / 2
    sa = (iva[1] - iva[0]) / 2
    sb = (ivb[1] - ivb[0]) / 2
    if lena > lenb:
        step = sb
        for i in xrange(0 - win, win + 1):
            if i == 0:
                continue
            nivb = [ivb[0], ivb[1]]
            nivb[0] = max([0, cb + i * step - sb])
            nivb[1] = max([0, cb + i * step + sb])
            ivas.append(iva)
            ivbs.append(nivb)
        return ivas, ivbs
    if lena < lenb:
        step = sa
        for i in xrange(0 - win, win + 1):
            if i == 0:
                continue
            niva = [iva[0], iva[1]]
            niva[0] = max([0, ca + i * step - sa])
            niva[1] = max([0, ca + i * step + sa])
            ivas.append(niva)
            ivbs.append(ivb)
        return ivas, ivbs


def getStripePsFdr(iva, ivb, model, N, win=5):
    """
    for the interval a and b, searching its nearby windows to estimate FDR and p-values.  
    return ra, rb, rab, es,es_ra,es_rb, fdr, hyp, pop, nbp
    """
    ra, rb, rab = getPETsforRegions(iva, ivb, model)
    ivas, ivbs = getNearbyStripes(iva, ivb, win=win)
    #nras is a list for storing points ids for permutated regions
    nras, nrbs = [], []
    for na in ivas:
        nraSource = getCounts(na, model[0])
        nraTarget = getCounts(na, model[1])
        nra = nraSource.union(nraTarget)
        nras.append(nra)
    for nb in ivbs:
        nrbSource = getCounts(nb, model[0])
        nrbTarget = getCounts(nb, model[1])
        nrb = nrbSource.union(nrbTarget)
        nrbs.append(nrb)
    #caculating the permutated background
    rabs, nbps = [], []
    for nra in nras:
        nralen = float(len(nra))
        for nrb in nrbs:
            nrblen = len(nrb)
            nrab = float(len(nra.intersection(nrb)))
            if nrab > 0:
                #collect the value for poisson test
                rabs.append(nrab)
                #collect the possibility for following binomial test
                den = nrab / (nralen * nrblen)
                nbps.append(den)
            else:
                nbps.append(0.0)
                rabs.append(0.0)
    if len(rabs) == 0:
        return ra, rb, rab, np.inf, rab / float(ra), rab / float(
            rb), 0.0, 0.0, 1e-300, 1e-300,
    rabs = np.array(rabs)
    #local fdr
    fdr = len(rabs[rabs > rab]) / float(len(rabs))
    mrabs = float(np.mean(rabs))
    #enrichment score
    if mrabs > 0:
        es = rab / np.mean(rabs[rabs > 0])
    else:
        es = np.inf
    #simple possion test
    lam = mrabs
    pop = max([1e-300, poisson.sf(rab - 1.0, lam)])
    #simple binomial test
    bp = np.mean(nbps) * ra * rb / N
    nbp = max([1e-300, binom.sf(rab - 1.0, N - rab, bp)])
    return ra, rb, rab, es, rab / float(ra), rab / float(rb), fdr, pop, nbp


def estStripeSig(f, records):
    """
    """
    model, N = getGenomeCoverage(f)
    print("Genomic coverage model built from %s" % f)
    if N == 0:
        print("No cis-PETs parsed as requiring distance cutoff >%s from %s" % ( discut, f)) 
        return None
    ds = {}
    i = 0
    for r in records:
        chrom = r[0]
        key = "%s-%s-%s" % (r[0], r[3], i)
        iva = [max(0, r[1]), r[2]]
        ivb = [max(0, r[4]), r[5]]
        ra, rb, rab = getPETsforRegions(iva, ivb, model)
        if i % 100 == 0:
            cFlush("%s interaction p-values estimated for %s" % (i, f))
        ra, rb, rab, es, es_ra, es_rb, fdr, pop, nbp = getStripePsFdr(
            iva, ivb, model, N)
        #this part should be furthur modified, as for most ideable data, there are no noise, so the es should be inf, however, not possible
        ds[key] = {
            "ra": ra,
            "rb": rb,
            "rab": rab,
            "ES": es,
            "ES_ra": es_ra,
            "ES_rb": es_rb,
            "FDR": fdr,
            "poisson_p-value": pop,
            "binomial_p-value": nbp,
            "iva": "%s:%s-%s" % (chrom, iva[0], iva[1]),
            "ivb": "%s:%s-%s" % (chrom, ivb[0], ivb[1])
        }
        i += 1
    print()
    #memory usage
    del model
    gc.collect()
    if len(ds.keys()) == 0:
        return None
    ds = pd.DataFrame(ds).T
    return ds


def markStripeSig(
        ds,
        escut=2.0,
        fdrcut=0.1,
        ppcut=1e-5,
        es_cut=0.2, ):
    """
    """
    #filter data according to cutoffs
    #larger enrichment score
    a = ds["ES"]
    a = a[a >= escut]
    #smaller FDR
    b = ds.loc[a.index, "FDR"]
    b = b[b <= fdrcut]
    #smaller poisson
    c = ds.loc[b.index, "poisson_p-value"]
    c = c[c <= ppcut]
    #higher enrichment of es_a, es_b
    d = ds.loc[c.index, "ES_ra"]
    d = d[d >= es_cut]
    e = ds.loc[c.index, "ES_rb"]
    e = e[e >= es_cut]
    f = d.index.union(e.index)
    #higher PETs
    rs = f
    ns = pd.Series(data=np.zeros(ds.shape[0]), index=ds.index)
    ns[rs] = 1.0
    ds["significant"] = ns
    return ds


def stripe2juice(fin, fout, significant=1):
    """
    """
    with open(fout, "w") as f:
        line = [
            "chromosome1",
            "x1",
            "x2",
            "chromosome2",
            "y1",
            "y2",
            "color",
            "observed",
            "stripId",
            "FDR",
            "EnrichmentScore",
            "EnrichmentScore_X",
            "EnrichmentScore_Y",
            "-log10(binomal_p-value)",
            "-log10(poisson_p-value)",
        ]
        f.write("\t".join(line) + "\n")
        for i, line in enumerate(open(fin)):
            if i == 0:
                continue
            line = line.split("\n")[0].split("\t")
            if significant > 0 and float(line[12]) < 1:
                continue
            iva = parseIv(line[6])
            ivb = parseIv(line[7])
            nline = [
                iva[0],
                iva[1],
                iva[2],
                ivb[0],
                ivb[1],
                ivb[2],
                '"0,255,255"',
                line[10],
                line[0],
                line[4],
                line[1],
                line[2],
                line[3],
                -np.log10(float(line[5])),
                -np.log10(float(line[8])),
            ]
            f.write("\t".join(map(str, nline)) + "\n")




def callStripes(jddir,
                fout,
                eps=20000,
                minPts=5,
                pets=100,
                ext=50,
                lengthFoldDiff=50,
                chroms=[],
                juice=False,
                cpus=1):
    """
    Calling stripes with variant of cDBSCAN.
    """
    #1. parepare all required .jd files
    records = {}
    for f in glob(os.path.join(jddir, "*.jd")):
        c = tuple(os.path.splitext(os.path.split(f)[-1])[0].split("-"))
        if chroms == ['']:
            records[c] = {"f": f}
        if chroms != [''] and c[0] in chroms and c[1] in chroms:
            records[c] = {"f": f}
    #2. run parallelly variant of cDBSCAN to find candidate stripes
    #2.1 x, horizontal stripes
    ds_x = Parallel(n_jobs=cpus)(delayed(singleStripDBSCAN)(
        records[key]["f"], eps, minPts, extx=ext) for key in records.keys())
    ds_x = dict(zip([d[0] for d in ds_x], [d[1] for d in ds_x]))
    #2.2 y, vertical stripes
    ds_y = Parallel(n_jobs=cpus)(delayed(singleStripDBSCAN)(
        records[key]["f"], eps, minPts, exty=ext) for key in records.keys())
    ds_y = dict(zip([d[0] for d in ds_y], [d[1] for d in ds_y]))
    #3.1 filtering candidate stripes by requring pets and length difference for x and y, horizontal stripes
    ds_x = filterCandidateStripes(
        ds_x, pets=pets, lengthFoldDiff=lengthFoldDiff)
    #3.2 filtering horizontal stripes
    ds_y = filterCandidateStripes(
        ds_y, pets=pets, lengthFoldDiff=lengthFoldDiff)
    #4.1 estimating the significance for horizontal stripes
    ds_x = Parallel(n_jobs=cpus)(delayed(estStripeSig)(records[key]["f"],
                                                       ds_x[key])
                                 for key in ds_x.keys())
    ds_x = [x for x in ds_x if x is not None]
    #4.2 estimating the significance for verical stripes
    ds_y = Parallel(n_jobs=cpus)(delayed(estStripeSig)(records[key]["f"],
                                                       ds_y[key])
                                 for key in ds_y.keys())
    ds_y = [y for y in ds_y if y is not None]
    if len(ds_x) > 0:
        ds_x = pd.concat(ds_x)
        #5. marking the significant stripes
        ds_x = markStripeSig(ds_x)
        #6. saveing called stripes
        ds_x.to_csv( fout + "_x_horizontal.stripe", sep="\t", index_label="stripeId")
        #7. convert to juicebox annotation
        if juice:
            stripe2juice(fout + "_x_horizontal.stripe",
                     fout + "_x_horizontal_juicebox.txt", 1)
    if len(ds_y) > 0:
        ds_y = pd.concat(ds_y)
        #5. marking the significant stripes
        ds_y = markStripeSig(ds_y)
        #6. saveing called stripes
        ds_y.to_csv( fout + "_y_vertical.stripe", sep="\t", index_label="stripeId")
        #7. convert to juicebox annotation
        if juice:
            stripe2juice(fout + "_y_vertical.stripe",
                     fout + "_y_vertical_juicebox.txt", 1)


def callStripesHelp():
    """
    Create the command line interface for the script of callStripes.
    """
    epilog = EPILOG
    description = """
        Call stripes ( the stucture discoverd in The Energetics and Physiological Impact of Cohesin Extrusion). 
        """
    parser = argparse.ArgumentParser(description=description, epilog=epilog)
    parser.add_argument(
        "-d",
        dest="d",
        required=True,
        type=str,
        help=
        "The directory of cis .jd file used to call stripes,created by cLoops with option -s."
    )
    parser.add_argument(
        "-o", dest="output", required=True, type=str, help="Output prefix.")
    parser.add_argument(
        "-eps",
        dest="eps",
        default=20000,
        type=int,
        required=False,
        help=
        "Distance that define two points being neighbors, eps in cDBSCAN as key parameter, same to eps parameter in cLoops. To call stripes, it's quite different from call loops, here default set is 20000."
    )
    parser.add_argument(
        "-minPts",
        dest="minPts",
        default=5,
        type=int,
        help=
        "Points required in a cluster, minPts in cDBSCAN, key parameter, same to minPts parameter in cLoops. To call stripes, it's quite different from call loops, here default set is 5."
    )
    parser.add_argument(
        "-ext",
        dest="ext",
        default=50,
        type=int,
        help="Extension fold for x-axis or y-axis, default is 50.")
    parser.add_argument(
        "-pets",
        dest="pets",
        default=200,
        help="For significant stripes, minimum points required, default is 200."
    )
    parser.add_argument(
        "-lenFold",
        dest="lengthFoldDiff",
        default=50,
        help=
        "For significant stripes, minimum length fold difference requried for the x/y or y/x,default is 50."
    )
    parser.add_argument(
        "-c",
        dest="chroms",
        required=False,
        default="",
        type=str,
        help=
        "Whether to process limited chroms, specify it as chr1,chr2,chr3, default is not. Set it to the same one for cLoops."
    )

    parser.add_argument(
        "-j",
        dest="juice",
        required=False,
        action="store_true",
        help=
        "Whether to convert stripes to 2d feature annotations to visualize in Juicebox. Default is No, set this flag to save."
    )
    parser.add_argument(
        "-p",
        dest="cpu",
        required=False,
        default=1,
        type=int,
        help=
        "CPU number used to run the job, default is 1,set -1 to use all cpus available."
    )
    op = parser.parse_args()
    return op


if __name__ == "__main__":
    start = datetime.now()
    global logger
    fn = os.path.join(os.getcwd(), "callStripes.log")
    logger = getLogger(fn)
    op = callStripesHelp()
    report = "Command line: callStripes -d {} -o {} -eps {} -minPts {} -pets {} -ext {} -c {} -p {} -j {}".format(
        op.d, op.output, op.eps, op.minPts, op.pets, op.ext, op.chroms.split(","), op.cpu,
        op.juice)
    logger.info(report)
    callStripes(
        op.d,
        op.output,
        eps=op.eps,
        minPts=op.minPts,
        pets=op.pets,
        ext=op.ext,
        lengthFoldDiff=op.lengthFoldDiff,
        chroms=op.chroms.split(","),
        juice=op.juice,
        cpus=op.cpu)
    usedtime = datetime.now() - start
    r = "callStripes finished. Bye! Used time:%s" % usedtime
    logger.info(r)
